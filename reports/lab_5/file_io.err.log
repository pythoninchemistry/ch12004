Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
temperature, K = np.loadtxt('thermodynamic_data.csv', unpack=True)

print(temperature)
print(K)
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[12][39m[32m, line 1[39m
[32m----> [39m[32m1[39m temperature, K = [43mnp[49m[43m.[49m[43mloadtxt[49m[43m([49m[33;43m'[39;49m[33;43mthermodynamic_data.csv[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43munpack[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m      3[39m [38;5;28mprint[39m(temperature)
[32m      4[39m [38;5;28mprint[39m(K)

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py:1395[39m, in [36mloadtxt[39m[34m(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows, quotechar, like)[39m
[32m   1392[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(delimiter, [38;5;28mbytes[39m):
[32m   1393[39m     delimiter = delimiter.decode([33m'[39m[33mlatin1[39m[33m'[39m)
[32m-> [39m[32m1395[39m arr = [43m_read[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[43mdtype[49m[43m=[49m[43mdtype[49m[43m,[49m[43m [49m[43mcomment[49m[43m=[49m[43mcomment[49m[43m,[49m[43m [49m[43mdelimiter[49m[43m=[49m[43mdelimiter[49m[43m,[49m
[32m   1396[39m [43m            [49m[43mconverters[49m[43m=[49m[43mconverters[49m[43m,[49m[43m [49m[43mskiplines[49m[43m=[49m[43mskiprows[49m[43m,[49m[43m [49m[43musecols[49m[43m=[49m[43musecols[49m[43m,[49m
[32m   1397[39m [43m            [49m[43munpack[49m[43m=[49m[43munpack[49m[43m,[49m[43m [49m[43mndmin[49m[43m=[49m[43mndmin[49m[43m,[49m[43m [49m[43mencoding[49m[43m=[49m[43mencoding[49m[43m,[49m
[32m   1398[39m [43m            [49m[43mmax_rows[49m[43m=[49m[43mmax_rows[49m[43m,[49m[43m [49m[43mquote[49m[43m=[49m[43mquotechar[49m[43m)[49m
[32m   1400[39m [38;5;28;01mreturn[39;00m arr

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.12.9/x64/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py:1046[39m, in [36m_read[39m[34m(fname, delimiter, comment, quote, imaginary_unit, usecols, skiplines, max_rows, converters, ndmin, unpack, dtype, encoding)[39m
[32m   1043[39m     data = _preprocess_comments(data, comments, encoding)
[32m   1045[39m [38;5;28;01mif[39;00m read_dtype_via_object_chunks [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m-> [39m[32m1046[39m     arr = [43m_load_from_filelike[49m[43m([49m
[32m   1047[39m [43m        [49m[43mdata[49m[43m,[49m[43m [49m[43mdelimiter[49m[43m=[49m[43mdelimiter[49m[43m,[49m[43m [49m[43mcomment[49m[43m=[49m[43mcomment[49m[43m,[49m[43m [49m[43mquote[49m[43m=[49m[43mquote[49m[43m,[49m
[32m   1048[39m [43m        [49m[43mimaginary_unit[49m[43m=[49m[43mimaginary_unit[49m[43m,[49m
[32m   1049[39m [43m        [49m[43musecols[49m[43m=[49m[43musecols[49m[43m,[49m[43m [49m[43mskiplines[49m[43m=[49m[43mskiplines[49m[43m,[49m[43m [49m[43mmax_rows[49m[43m=[49m[43mmax_rows[49m[43m,[49m
[32m   1050[39m [43m        [49m[43mconverters[49m[43m=[49m[43mconverters[49m[43m,[49m[43m [49m[43mdtype[49m[43m=[49m[43mdtype[49m[43m,[49m
[32m   1051[39m [43m        [49m[43mencoding[49m[43m=[49m[43mencoding[49m[43m,[49m[43m [49m[43mfilelike[49m[43m=[49m[43mfilelike[49m[43m,[49m
[32m   1052[39m [43m        [49m[43mbyte_converters[49m[43m=[49m[43mbyte_converters[49m[43m)[49m
[32m   1054[39m [38;5;28;01melse[39;00m:
[32m   1055[39m     [38;5;66;03m# This branch reads the file into chunks of object arrays and then[39;00m
[32m   1056[39m     [38;5;66;03m# casts them to the desired actual dtype.  This ensures correct[39;00m
[32m   1057[39m     [38;5;66;03m# string-length and datetime-unit discovery (like `arr.astype()`).[39;00m
[32m   1058[39m     [38;5;66;03m# Due to chunking, certain error reports are less clear, currently.[39;00m
[32m   1059[39m     [38;5;28;01mif[39;00m filelike:

[31mValueError[39m: could not convert string '100,' to float64 at row 0, column 1.

